@page "/"
@using CHN.Shared

<div class="container">
	<p class="h3">Sum Formula</p>
	<div class="form-group">
		<label for="sumFormula">Sum Formula</label>
		<input type="text" class="form-control" id="sumFormula" aria-describedby="sumFormulaHelp" @bind="@sumFormula" @oninput="(ChangeEventArgs e) => sumFormula = e.Value.ToString()"/>
		<small id="sumFormulaHelp" class="form-text text-muted">Enter the sum formula of interest.</small>
	</div>
	@if(!String.IsNullOrEmpty(sumFormula) && sumFormula.Length > 2)
	{
		<p>Parsed Sum Formula: @MolForm.Parse(sumFormula) - Molecular Weight: @MolForm.MolWeight(sumFormula)</p>
		<ul>
			@foreach (KeyValuePair<string, double> item in MolForm.Deviation(sumFormula))
			{
				<li>@item.Key [%]: @item.Value</li>
			}
		</ul>
	}

	
	<div class="row">
		<div class="col-sm-6">
			<p class="h3">Experimental Values</p>
			<div class="form-group row">
				<label for="expC" class="col-form-label col-sm-2">C [%]:</label>
				<input type="text" class="form-control col-sm-10" id="expC" @bind="@expC" />
			</div>
			<div class="form-group row">
				<label for="expH" class="col-form-label col-sm-2">H [%]:</label>
				<input type="text" class="form-control col-sm-10" id="expH" @bind="expH" />
			</div>
			<div class="form-group row">
				<label for="expN" class="col-form-label col-sm-2">N [%]:</label>
				<input type="text" class="form-control col-sm-10" id="expN" @bind="expN" />
			</div>

			<div class="form-group row">
				<label for="expS" class="col-form-label col-sm-2">S [%]:</label>
				<input type="text" class="form-control col-sm-10" id="expS" @bind="expS" />
			</div>

			<div class="form-group row">
				<label for="expF" class="col-form-label col-sm-2">F [%]:</label>
				<input type="text" class="form-control col-sm-10" id="expF" @bind="expF" />
			</div>

			<!--output deltas-->
			@if (!String.IsNullOrEmpty(sumFormula) && sumFormula.Length > 2)
			{
				<ul>
					@foreach (KeyValuePair<string, double> item in MolForm.Deviation(sumFormula).Deviation(ReadExperimental()))
					{
						<li>@item.Key [%]: @item.Value</li>
					}
				</ul>
			}
		</div>
		<div class="col-sm-6">
			<p class="h3">Possible Impurities</p>
			<p class="h4">Impurity 1</p>
			<div class="form-group row">
				<label for="imp1Form" class="col-form-label col-sm-2">Formula</label>
				<input type="text" class="form-control col-sm-10" id="imp1Form" @bind="@imp1Form" />
			</div>
			<div class="row">
				<div class="form-group row col-sm-6">
					<label for="imp1lower" class="col-form-label col-sm-4">Lower</label>
					<input type="text" class="form-control col-sm-8" id="imp1lower" @bind="@imp1Lower" />
				</div>
				<div class="form-group row col-sm-6">
					<label for="imp1upper" class="col-form-label col-sm-4">Upper</label>
					<input type="text" class="form-control col-sm-8" id="imp1upper" @bind="@imp1Upper" />
				</div>
				<div class="form-group row col-sm-6">
					<label for="imp1step" class="col-form-label col-sm-4">Step</label>
					<input type="text" class="form-control col-sm-8" id="imp1step" @bind="@imp1Step" />
				</div>
			</div>
			<p class="h4">Impurity 2</p>
			<div class="form-group row">
				<label for="imp2Form" class="col-form-label col-sm-2">Formula</label>
				<input type="text" class="form-control col-sm-10" id="imp2Form" @bind="@imp2Form" />
			</div>
			<div class="row">
				<div class="form-group row col-sm-6">
					<label for="imp2lower" class="col-form-label col-sm-4">Lower</label>
					<input type="text" class="form-control col-sm-8" id="imp2lower" @bind="@imp2Lower" />
				</div>
				<div class="form-group row col-sm-6">
					<label for="imp2upper" class="col-form-label col-sm-4">Upper</label>
					<input type="text" class="form-control col-sm-8" id="imp2upper" @bind="@imp2Upper" />
				</div>
				<div class="form-group row col-sm-6">
					<label for="imp2step" class="col-form-label col-sm-4">Step</label>
					<input type="text" class="form-control col-sm-8" id="imp2step" @bind="@imp2Step" />
				</div>
			</div>
			<input type="button" value="Recalculate" @onclick="@(async() => await Recalculate())" />
		</div>

		<p>
			<span style="white-space: pre-line">@output</span>
</p>
	</div>
</div>
@code{
		//sum formula binding
	public string sumFormula = "";

	///exp binding variables
	public string expC = "";
	public string expH = "";
	public string expN = "";
	public string expS = "";
	public string expF = "";

	//impurity binding variables
	public string imp1Form;
	public string imp2Form;
	public string imp1Lower = "0";
	public string imp2Lower = "0";
	public string imp1Upper = "1";
	public string imp2Upper = "1";
	public string imp1Step = 0.1d.ToString();
	public string imp2Step = 0.1d.ToString();

	//output string
	public string output = "";

	//rebuild exp dictionary
	private Dictionary<string, double> ReadExperimental()
	{
		Dictionary<string, double> exp = new Dictionary<string, double>
		{
			["C"] = expC.ToDouble(),
			["H"] = expH.ToDouble(),
			["N"] = expN.ToDouble(),
			["F"] = expS.ToDouble(),
			["S"] = expF.ToDouble()
		};

		return exp;
	}

	public async Task Recalculate()
	{
		output = ""; //flush Text


		var impurities = new List<Impurity>();
		//read impurities 
		if (!String.IsNullOrEmpty(imp1Form)) impurities.Add(new Impurity(imp1Form, imp1Lower.ToDouble(), imp1Upper.ToDouble(), imp1Step.ToDouble()));
		if (!String.IsNullOrEmpty(imp2Form)) impurities.Add(new Impurity(imp2Form, imp2Lower.ToDouble(), imp2Upper.ToDouble(), imp2Step.ToDouble()));

		//solves all problems ;)
		double[] best = await Task.Run(() => this.sumFormula.Solve(ReadExperimental(), impurities));
		//gets the sum formula of best composition
		string sumFormula = this.sumFormula.SumFormula(impurities, best).Parse();

		//output everything.
		output = $"Analysis completed for {this.sumFormula} with Error: {sumFormula.Deviation().Error(ReadExperimental())}.\nBest Values found: {String.Join(", ", best)}\n" +
				$"Formula therefore is:\n{this.sumFormula} x ";
		for (int i = 0; i < impurities.Count; i++) output += $"{best[i]} {impurities[i].formula} ";
		output += $"\nFormula after parsing: {sumFormula}\n";

		//print analysis
		output += $"#########################################\n";
		foreach (var element in sumFormula.Deviation()) output += $"{element.Key} [%]: {element.Value}\n";
		output += $"#########################################\n";

		foreach (var item in MolForm.Deviation(sumFormula).Deviation(ReadExperimental())) output += $"{item.Key} [%]: {item.Value} \n";
		output += $"#########################################\n";
		this.StateHasChanged();
	}
}